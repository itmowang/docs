import{_ as s,c as n,o as a,a4 as p}from"./chunks/framework.CI8or701.js";const u=JSON.parse('{"title":"常用 Git 命令清单","description":"","frontmatter":{},"headers":[],"relativePath":"git/chapter1.md","filePath":"git/chapter1.md"}'),l={name:"git/chapter1.md"},i=p(`<h1 id="常用-git-命令清单" tabindex="-1">常用 Git 命令清单 <a class="header-anchor" href="#常用-git-命令清单" aria-label="Permalink to &quot;常用 Git 命令清单&quot;">​</a></h1><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt=""></p><p>几个专用名词的译名如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Workspace：工作区</span></span>
<span class="line"><span>Index / Stage：暂存区</span></span>
<span class="line"><span>Repository：仓库区（或本地仓库）</span></span>
<span class="line"><span>Remote：远程仓库</span></span></code></pre></div><p>1.新建代码库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 在当前目录新建一个Git代码库</span></span>
<span class="line"><span>$ git init</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个目录，将其初始化为Git代码库</span></span>
<span class="line"><span>$ git init [project-name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 下载一个项目和它的整个代码历史</span></span>
<span class="line"><span>$ git clone [url]</span></span></code></pre></div><p>2.配置<br> Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 显示当前的Git配置</span></span>
<span class="line"><span>$ git config --list</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 编辑Git配置文件</span></span>
<span class="line"><span>$ git config -e [--global]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置提交代码时的用户信息</span></span>
<span class="line"><span>$ git config [--global] user.name &quot;[name]&quot;</span></span>
<span class="line"><span>$ git config [--global] user.email &quot;[email address]&quot;</span></span></code></pre></div><p>3.增加/删除文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 添加指定文件到暂存区</span></span>
<span class="line"><span>$ git add [file1] [file2] ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加指定目录到暂存区，包括子目录</span></span>
<span class="line"><span>$ git add [dir]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加当前目录的所有文件到暂存区</span></span>
<span class="line"><span>$ git add .</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加每个变化前，都会要求确认</span></span>
<span class="line"><span># 对于同一个文件的多处变化，可以实现分次提交</span></span>
<span class="line"><span>$ git add -p</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除工作区文件，并且将这次删除放入暂存区</span></span>
<span class="line"><span>$ git rm [file1] [file2] ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 停止追踪指定文件，但该文件会保留在工作区</span></span>
<span class="line"><span>$ git rm --cached [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 改名文件，并且将这个改名放入暂存区</span></span>
<span class="line"><span>$ git mv [file-original] [file-renamed]</span></span></code></pre></div><p>4.代码提交</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 提交暂存区到仓库区</span></span>
<span class="line"><span>$ git commit -m [message]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交暂存区的指定文件到仓库区</span></span>
<span class="line"><span>$ git commit [file1] [file2] ... -m [message]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交工作区自上次commit之后的变化，直接到仓库区</span></span>
<span class="line"><span>$ git commit -a</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交时显示所有diff信息</span></span>
<span class="line"><span>$ git commit -v</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 使用一次新的commit，替代上一次提交</span></span>
<span class="line"><span># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span>
<span class="line"><span>$ git commit --amend -m [message]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重做上一次commit，并包括指定文件的新变化</span></span>
<span class="line"><span>$ git commit --amend [file1] [file2] ...</span></span></code></pre></div><p>5.分支</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 列出所有本地分支</span></span>
<span class="line"><span>$ git branch</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 列出所有远程分支</span></span>
<span class="line"><span>$ git branch -r</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 列出所有本地分支和远程分支</span></span>
<span class="line"><span>$ git branch -a</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，但依然停留在当前分支</span></span>
<span class="line"><span>$ git branch [branch-name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，并切换到该分支</span></span>
<span class="line"><span>$ git checkout -b [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，指向指定commit</span></span>
<span class="line"><span>$ git branch [branch] [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，与指定的远程分支建立追踪关系</span></span>
<span class="line"><span>$ git branch --track [branch] [remote-branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 切换到指定分支，并更新工作区</span></span>
<span class="line"><span>$ git checkout [branch-name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 切换到上一个分支</span></span>
<span class="line"><span>$ git checkout -</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 建立追踪关系，在现有分支与指定的远程分支之间</span></span>
<span class="line"><span>$ git branch --set-upstream [branch] [remote-branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 合并指定分支到当前分支</span></span>
<span class="line"><span>$ git merge [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 选择一个commit，合并进当前分支</span></span>
<span class="line"><span>$ git cherry-pick [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除分支</span></span>
<span class="line"><span>$ git branch -d [branch-name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除远程分支</span></span>
<span class="line"><span>$ git push origin --delete [branch-name]</span></span>
<span class="line"><span>$ git branch -dr [remote/branch]</span></span></code></pre></div><p>6.标签</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 列出所有tag</span></span>
<span class="line"><span>$ git tag</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个tag在当前commit</span></span>
<span class="line"><span>$ git tag [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个tag在指定commit</span></span>
<span class="line"><span>$ git tag [tag] [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除本地tag</span></span>
<span class="line"><span>$ git tag -d [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除远程tag</span></span>
<span class="line"><span>$ git push origin :refs/tags/[tagName]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查看tag信息</span></span>
<span class="line"><span>$ git show [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交指定tag</span></span>
<span class="line"><span>$ git push [remote] [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交所有tag</span></span>
<span class="line"><span>$ git push [remote] --tags</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，指向某个tag</span></span>
<span class="line"><span>$ git checkout -b [branch] [tag]</span></span></code></pre></div><p>7.查看信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 显示有变更的文件</span></span>
<span class="line"><span>$ git status</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示当前分支的版本历史</span></span>
<span class="line"><span>$ git log</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示commit历史，以及每次commit发生变更的文件</span></span>
<span class="line"><span>$ git log --stat</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 搜索提交历史，根据关键词</span></span>
<span class="line"><span>$ git log -S [keyword]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示某个commit之后的所有变动，每个commit占据一行</span></span>
<span class="line"><span>$ git log [tag] HEAD --pretty=format:%s</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span>
<span class="line"><span>$ git log [tag] HEAD --grep feature</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示某个文件的版本历史，包括文件改名</span></span>
<span class="line"><span>$ git log --follow [file]</span></span>
<span class="line"><span>$ git whatchanged [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示指定文件相关的每一次diff</span></span>
<span class="line"><span>$ git log -p [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示过去5次提交</span></span>
<span class="line"><span>$ git log -5 --pretty --oneline</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示所有提交过的用户，按提交次数排序</span></span>
<span class="line"><span>$ git shortlog -sn</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示指定文件是什么人在什么时间修改过</span></span>
<span class="line"><span>$ git blame [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示暂存区和工作区的差异</span></span>
<span class="line"><span>$ git diff</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示暂存区和上一个commit的差异</span></span>
<span class="line"><span>$ git diff --cached [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示工作区与当前分支最新commit之间的差异</span></span>
<span class="line"><span>$ git diff HEAD</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示两次提交之间的差异</span></span>
<span class="line"><span>$ git diff [first-branch]...[second-branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示今天你写了多少行代码</span></span>
<span class="line"><span>$ git diff --shortstat &quot;@{0 day ago}&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示某次提交的元数据和内容变化</span></span>
<span class="line"><span>$ git show [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示某次提交发生变化的文件</span></span>
<span class="line"><span>$ git show --name-only [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示某次提交时，某个文件的内容</span></span>
<span class="line"><span>$ git show [commit]:[filename]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示当前分支的最近几次提交</span></span>
<span class="line"><span>$ git reflog</span></span></code></pre></div><p>8.远程同步</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 下载远程仓库的所有变动</span></span>
<span class="line"><span>$ git fetch [remote]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示所有远程仓库</span></span>
<span class="line"><span>$ git remote -v</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示某个远程仓库的信息</span></span>
<span class="line"><span>$ git remote show [remote]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 增加一个新的远程仓库，并命名</span></span>
<span class="line"><span>$ git remote add [shortname] [url]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 取回远程仓库的变化，并与本地分支合并</span></span>
<span class="line"><span>$ git pull [remote] [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 上传本地指定分支到远程仓库</span></span>
<span class="line"><span>$ git push [remote] [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 强行推送当前分支到远程仓库，即使有冲突</span></span>
<span class="line"><span>$ git push [remote] --force</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 推送所有分支到远程仓库</span></span>
<span class="line"><span>$ git push [remote] --all</span></span></code></pre></div><p>9.撤销</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 恢复暂存区的指定文件到工作区</span></span>
<span class="line"><span>$ git checkout [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 恢复某个commit的指定文件到暂存区和工作区</span></span>
<span class="line"><span>$ git checkout [commit] [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 恢复暂存区的所有文件到工作区</span></span>
<span class="line"><span>$ git checkout .</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span>
<span class="line"><span>$ git reset [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重置暂存区与工作区，与上一次commit保持一致</span></span>
<span class="line"><span>$ git reset --hard</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span>
<span class="line"><span>$ git reset [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span>
<span class="line"><span>$ git reset --hard [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span>
<span class="line"><span>$ git reset --keep [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个commit，用来撤销指定commit</span></span>
<span class="line"><span># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span>
<span class="line"><span>$ git revert [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 暂时将未提交的变化移除，稍后再移入</span></span>
<span class="line"><span>$ git stash</span></span>
<span class="line"><span>$ git stash pop</span></span></code></pre></div><p>10.其他</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 生成一个可供发布的压缩包</span></span>
<span class="line"><span>$ git archive</span></span></code></pre></div>`,25),e=[i];function c(t,o,g,m,h,r){return a(),n("div",null,e)}const $=s(l,[["render",c]]);export{u as __pageData,$ as default};
